<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.oneshot.sales.contract.ContractMapper">

    <resultMap id="ContractResultMap" type="ContractVO">
        <result property="clientNo" column="CLIENT_NO"/>
        <result property="contractSdate" column="CONTRACT_SDATE"/>
        <result property="contractEdate" column="CONTRACT_EDATE"/>
        <result property="productName" column="PRODUCT_NAME"/>
        <result property="managerName" column="MANAGER_NAME"/>
        <result property="employeeName" column="EMPLOYEE_NAME"/>
        <result property="contractPriceStatus" column="CONTRACT_PRICE_STATUS"/>
    </resultMap>

    <!-- 계약 조회 기능 -->
    <select id="getList" resultMap="ContractResultMap">
        SELECT
            CONTRACT_PRICE.CONTRACT_PRICE_NO,
            CONTRACT_PRICE.CLIENT_NO,
            CLIENT.CLIENT_NAME,
            CONTRACT_PRICE.CONTRACT_SDATE,
            CONTRACT_PRICE.CONTRACT_EDATE,
            CONTRACT_PRICE.CONTRACT_PRICE,
            PRODUCT.PRODUCT_NAME,
            CLIENT.MANAGER_NAME,
            EMPLOYEE.EMPLOYEE_NAME,
            CONTRACT_PRICE.CONTRACT_PRICE_STATUS
        FROM CONTRACT_PRICE
        LEFT JOIN PRODUCT ON CONTRACT_PRICE.PRODUCT_NO = PRODUCT.PRODUCT_NO
        LEFT JOIN EMPLOYEE ON CONTRACT_PRICE.EMPLOYEE_NO = EMPLOYEE.EMPLOYEE_NO
        LEFT JOIN CLIENT ON CONTRACT_PRICE.CLIENT_NO = CLIENT.CLIENT_NO
        WHERE 1 = 1
        <if test="clientName != null and clientName != ''">
            AND CLIENT.CLIENT_NAME like concat('%', #{clientName}, '%')
        </if>
        <if test="contractSdate != null and contractSdate != ''">
            AND CONTRACT_PRICE.CONTRACT_SDATE = CAST(#{contractSdate} AS date)
        </if>
        <if test="contractEdate != null and contractEdate != ''">
            AND CONTRACT_PRICE.CONTRACT_EDATE = CAST(#{contractEdate} AS date)
        </if>
        <if test="productName != null and productName != ''">
            AND PRODUCT.PRODUCT_NAME like concat('%', #{productName}, '%')
        </if>
        <if test="managerName != null and managerName != ''">
            AND CLIENT.MANAGER_NAME like concat('%', #{managerName}, '%')
        </if>
        <if test="employeeName != null and employeeName != ''">
            AND EMPLOYEE.EMPLOYEE_NAME like concat('%', #{employeeName}, '%')
        </if>
        <if test="contractPriceStatus != null and contractPriceStatus != ''">
            AND CONTRACT_PRICE.CONTRACT_PRICE_STATUS = #{contractPriceStatus}
        </if>
        ORDER BY CONTRACT_PRICE.CONTRACT_PRICE_NO DESC
        limit #{amount} offset #{pageStart}
    </select>

    <!-- 계약 등록 기능 -->
    <insert id="getRegist" parameterType="ContractVO">
        INSERT INTO CONTRACT_PRICE (
            CONTRACT_PRICE_NO,
            PRODUCT_NO,
            EMPLOYEE_NO,
            CLIENT_NO,
            CONTRACT_SDATE,
            CONTRACT_EDATE,
            CONTRACT_PRICE,
            CONTRACT_PRICE_STATUS
        )
        VALUES
            (nextval('contract_price_seq'),
            #{productNo},
            #{employeeNo},
            #{clientNo},
            #{contractSdate},
            #{contractEdate},
            #{contractPrice},
            '승인대기')
    </insert>

    <!-- 겹치는 계약을 조회하는 SQL -->
    <select id="findOverlappingContracts" resultType="ContractVO">
        SELECT *
        FROM contract_price
        WHERE client_no = #{clientNo}
        AND product_no = #{productNo}
        AND (contract_sdate BETWEEN #{contractSdate} AND #{contractEdate}
        OR contract_edate BETWEEN #{contractSdate} AND #{contractEdate})
    </select>

    <!-- 기존 계약의 시작 날짜를 업데이트하는 SQL -->
    <update id="updateExistingContract">
        UPDATE contract_price
        SET contract_sdate = DATE_ADD(#{contractEdate}, INTERVAL 1 DAY)
        WHERE client_no = #{clientNo}
        AND product_no = #{productNo}
        <![CDATA[ AND contract_sdate &lt;= #{contractEdate} ]]>
        <![CDATA[ AND contract_edate &gt;= #{contractSdate} ]]>
    </update>

    <select id="getClientList" resultType="ClientVO">
        SELECT *
        FROM CLIENT
        ORDER BY CLIENT_NAME
    </select>

    <select id="getContractUpdateList" resultType="ClientVO">
        select * from client where client_no = #{clientNo}
    </select>

    <select id="getContractProductList" resultType="ProductVO">
        SELECT * FROM PRODUCT
    </select>

    <select id="getContractPriceNo" resultType="Integer">
        select contract_price_no from contract_price order by contract_price_no desc limit 1
    </select>

    <select id="getContractDetails" resultType="ContractVO">
        select client.client_name,
               client.manager_name,
               client.manager_phone,
               employee.employee_name,
               employee.employee_phone,
               contract_price.contract_sdate,
               contract_price.contract_edate,
               contract_price.contract_price,
               contract_price.contract_price_status,
               product.product_name,
               product.product_no
        from contract_price
                 left join client on contract_price.client_no = client.client_no
                 left join employee on contract_price.employee_no = employee.employee_no
                 left join product on contract_price.product_no = product.product_no

        where contract_price.contract_price_no = #{contractPriceNo}
    </select>

    <update id="getContractModify" parameterType="ContractVO">
        update contract_price
        set
            contract_price_status = #{contractPriceStatus},
            contract_sdate = #{contractSdate},
            contract_edate = #{contractEdate},
            contract_price = #{contractPrice}
        where
            contract_price_no = #{contractPriceNo} and
            product_no = #{productNo}
    </update>

    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*)
        FROM (
        SELECT
        CONTRACT_PRICE.CONTRACT_PRICE_NO
        FROM CONTRACT_PRICE
        LEFT JOIN PRODUCT ON CONTRACT_PRICE.PRODUCT_NO = PRODUCT.PRODUCT_NO
        LEFT JOIN EMPLOYEE ON CONTRACT_PRICE.EMPLOYEE_NO = EMPLOYEE.EMPLOYEE_NO
        LEFT JOIN CLIENT ON CONTRACT_PRICE.CLIENT_NO = CLIENT.CLIENT_NO
        WHERE 1 = 1
        <if test="clientName != null and clientName != ''">
            AND CLIENT.CLIENT_NAME like concat('%', #{clientName}, '%')
        </if>
        <if test="contractSdate != null and contractSdate != ''">
            AND CONTRACT_PRICE.CONTRACT_SDATE = CAST(#{contractSdate} AS date)
        </if>
        <if test="contractEdate != null and contractEdate != ''">
            AND CONTRACT_PRICE.CONTRACT_EDATE = CAST(#{contractEdate} AS date)
        </if>
        <if test="productName != null and productName != ''">
            AND PRODUCT.PRODUCT_NAME like concat('%', #{productName}, '%')
        </if>
        <if test="managerName != null and managerName != ''">
            AND CLIENT.MANAGER_NAME like concat('%', #{managerName}, '%')
        </if>
        <if test="employeeName != null and employeeName != ''">
            AND EMPLOYEE.EMPLOYEE_NAME like concat('%', #{employeeName}, '%')
        </if>
        <if test="contractPriceStatus != null and contractPriceStatus != ''">
            AND CONTRACT_PRICE.CONTRACT_PRICE_STATUS like concat('%', #{contractPriceStatus}, '%')
        </if>
        GROUP BY
        CONTRACT_PRICE.CONTRACT_PRICE_NO
        ) AS SUBQUERY
    </select>

    <select id="getContractProduct" resultType="ContractVO">
        select * from contract_price where product_no = #{productNo}
    </select>

    <select id="countOverlappingContracts" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM contract_price
        WHERE product_no = #{productNo}
        AND client_no = #{clientNo}
        AND (
        <![CDATA[ (contract_sdate <= #{contractEdate} AND contract_edate >= #{contractSdate}) ]]>
        )
    </select>

    <update id="updateOverlappingContract">
        UPDATE contract_price
        SET contract_sdate = #{newEndDate}
        WHERE product_no = #{productNo}
        <![CDATA[ AND contract_sdate <= #{contractEdate} ]]>
        <![CDATA[ AND contract_edate >= #{contractSdate} ]]>
    </update>

    <select id="getOverlappingContracts" parameterType="map" resultType="ContractVO">
        SELECT * FROM contract_price
        WHERE product_no = #{productNo}
        <![CDATA[ AND (contract_sdate <= #{contractEdate} AND contract_edate >= #{contractSdate}) ]]>
        AND contract_price_status = '승인'
    </select>

    <update id="updateContract" parameterType="ContractVO">
        UPDATE contract_price
        SET
        contract_sdate = #{contractSdate},
        contract_edate = #{contractEdate},
        contract_price = #{contractPrice},
        contract_price_status = '승인대기'
        WHERE contract_price_no = #{contractPriceNo}
        AND product_no = #{productNo}
        AND contract_price_status = '승인'
    </update>

    <delete id="deleteContract" parameterType="ContractVO">
        DELETE FROM contract_price
        WHERE product_no = #{productNo}
        AND client_no = #{clientNo}
        AND contract_sdate BETWEEN #{contractSdate} AND #{contractEdate}
        AND contract_edate BETWEEN #{contractSdate} AND #{contractEdate}
        AND contract_price_status = '승인'
    </delete>

    <update id="approveContract">
        update contract_price
        set contract_price_status = '승인'
        where contract_price_no = #{contractPriceNo}
    </update>

    <update id="rejectContract">
        update contract_price
        set contract_price_status = '반려'
        where contract_price_no = #{contractPriceNo}
    </update>
</mapper>