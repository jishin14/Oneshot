<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.oneshot.inventory.purchase.PurchaseMapper">

    <!-- 구매 신청 등록 -->
    <insert id="registerPurchase" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="purchaseNo">
        INSERT INTO purchase (purchase_no, product_no, purchase_price, purchase_quantity, purchase_date, purchase_status, employee_no)
        VALUES
        <foreach collection="list" item="list" separator=",">
            (nextval('purchase_seq'), #{list.productNo}, #{list.purchasePrice}, #{list.purchaseQuantity}, NOW(), '승인대기', #{list.employeeNo})
        </foreach>
    </insert>


    <!-- 구매 신청할 때 값 불러오기 -->
    <select id="getAllSuppliers" resultType="SupplierVO">
        SELECT * FROM supplier
    </select>

    <select id="getSupplier" resultType="SupplierVO">
        select * from supplier where supplier_no = #{supplierNo}
    </select>

    <select id="getCategories" resultType="CategoryVO">
        select product.category_no, category_name
        from supplier inner join product on supplier.supplier_no = product.supplier_no inner join category on product.category_no = category.category_no
        where supplier.supplier_no = #{supplierNo}
        group by product.category_no, category_name
    </select>

    <select id="getProducts" resultType="ProductVO">
        select product_no, product_name from product where supplier_no = #{supplierNo} and category_no = #{categoryNo}
    </select>

    <select id="getQuantity" resultType="ProductVO">
        select product.product_no, coalesce(sum(purchase_quantity), 0) as inventory_quantity, safety_quantity
        from product left join purchase on product.product_no = purchase.product_no
        where product.product_no = #{productNo}
        group by product.product_no
    </select>

    <select id="getProductsByCategory" resultType="ProductVO">
        SELECT * FROM product WHERE category_no = #{categoryNo}
    </select>

    <select id="getAllEmployees" resultType="EmployeeVO">
        SELECT * FROM employee
    </select>


    <!-- 목록 조회 -->
    <select id="getAllPurchase" resultType="PurchaseVO">
        select pc.purchase_no,
               supplier_name,
               category_name,
               product_name,
               purchase_quantity,
               purchase_price,
               e.employee_name,
               pc.purchase_status,
               pc.purchase_date
        from purchase pc left join employee e on pc.employee_no = e.employee_no
                         left join product p on pc.product_no = p.product_no
                         left join category c on p.category_no = c.category_no
                         left join supplier s on p.supplier_no = s.supplier_no
        where 1 = 1
        <if test="supplierName != null and supplierName != ''">
            AND supplier_name LIKE CONCAT('%', #{supplierName}, '%')
        </if>
        <if test="categoryNo != null and categoryNo != ''">
            AND p.category_no = #{categoryNo}
        </if>
        <if test="productName != null and productName != ''">
            AND product_name LIKE CONCAT('%', #{productName}, '%')
        </if>
        <if test="employeeName != null and employeeName != ''">
            AND e.employee_name LIKE CONCAT('%', #{employeeName}, '%')
        </if>
        <if test="(purchaseSdate != null and purchaseSdate != '') and (purchaseEdate == null or purchaseEdate == '')">
            <![CDATA[ AND pc.purchase_date >= to_timestamp(#{purchaseSdate}, 'yyyy-MM-dd') ]]>
        </if>
        <if test="(purchaseEdate != null and purchaseEdate != '') and (purchaseSdate == null or purchaseSdate == '')">
            <![CDATA[ AND pc.purchase_date <= to_timestamp(#{purchaseEdate}, 'yyyy-MM-dd') ]]>
        </if>
        <if test="(purchaseSdate != null and purchaseSdate != '') and (purchaseEdate != null and purchaseEdate != '')">
            <![CDATA[ AND pc.purchase_date >= to_timestamp(#{purchaseSdate}, 'yyyy-MM-dd') and pc.purchase_date <= to_timestamp(#{purchaseEdate}, 'yyyy-MM-dd') ]]>
        </if>
        ORDER BY pc.purchase_no desc
        limit #{amount} offset #{pageStart}
    </select>

    <!-- 전체 게시글 페이지네이션 -->
    <select id="getTotalPurchase" resultType="int">
        SELECT count(*)
        FROM purchase pc left join employee e on pc.employee_no = e.employee_no
            left join product p on pc.product_no = p.product_no
            left join category c on p.category_no = c.category_no
            left join supplier s on p.supplier_no = s.supplier_no
        where 1 = 1
        <if test="supplierName != null and supplierName != ''">
            AND supplier_name LIKE CONCAT('%', #{supplierName}, '%')
        </if>
        <if test="categoryNo != null and categoryNo != ''">
            AND p.category_no = #{categoryNo}
        </if>
        <if test="productName != null and productName != ''">
            AND product_name LIKE CONCAT('%', #{productName}, '%')
        </if>
        <if test="employeeName != null and employeeName != ''">
            AND e.employee_name LIKE CONCAT('%', #{employeeName}, '%')
        </if>
        <if test="(purchaseSdate != null and purchaseSdate != '') and (purchaseEdate == null or purchaseEdate == '')">
            <![CDATA[ AND pc.purchase_date >= to_timestamp(#{purchaseSdate}, 'yyyy-MM-dd') ]]>
        </if>
    </select>

    <select id="getAllCategories" resultType="CategoryVO">
        select * from category
    </select>

    <update id="changeProductStatus">
        WITH stock_data AS (
        SELECT
        p.product_no,
        COALESCE(SUM(pur.purchase_quantity), 0) - COALESCE(SUM(ord.product_quantity), 0) AS stock_quantity
        FROM
        product p
        LEFT JOIN
        purchase pur ON p.product_no = pur.product_no
        LEFT JOIN
        order_item ord ON p.product_no = ord.product_no
        GROUP BY
        p.product_no
        )
        UPDATE product
        SET product_remark = CASE
        <![CDATA[ WHEN stock_data.stock_quantity < product.safety_quantity THEN '품절' ]]>
        ELSE '판매중'
        END
        FROM stock_data
        WHERE product.product_no = stock_data.product_no
        <![CDATA[ AND product.product_remark <> '단종' ]]>  -- 기존 값이 '단종'이 아닌 경우에만 업데이트
    </update>
</mapper>