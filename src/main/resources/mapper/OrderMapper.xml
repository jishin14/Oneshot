<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.oneshot.sales.order.OrderMapper">

    <!-- 판매등록  -->
    <insert id="orderHeader" parameterType="OrderVO" useGeneratedKeys="true" keyProperty="orderHeaderNo">
        INSERT INTO ORDER_HEADER (
        ORDER_SDATE,
        EMPLOYEE_NO,
        CLIENT_NO,
        DELIVERY_STATUS,
        DELIVERY
        )
        VALUES (
        #{orderSdate},
        #{employeeNo},
        #{clientNo},
        #{deliveryStatus},
        #{delivery}
        )
    </insert>

    <!-- 판매아이템등록  -->
    <insert id="orderItem" parameterType="OrderVO">
        INSERT INTO ORDER_ITEM (
        ORDER_HEADER_NO,
        PRODUCT_NO,
        CONTRACT_PRICE,
        PRODUCT_QUANTITY,
        AMOUNT
        )
        VALUES
        <foreach collection="orderItems" item="item" separator=",">
            (#{orderHeaderNo}, #{item.productNo}, #{item.contractPrice}, #{item.productQuantity}, #{item.amount})
        </foreach>
    </insert>

    <!-- 오더헤더가 같은 아이템 가져오기 -->
    <select id="getOrderItemsByOrderHeaderNo" resultType="OrderItemVO">
        SELECT OI.*,
               P.PRODUCT_NAME,
               (SELECT COUNT(*) FROM order_item WHERE order_header_no = #{orderHeaderNo}) AS itemCount
        FROM order_item OI
        JOIN PRODUCT P ON OI.PRODUCT_NO = P.PRODUCT_NO
        WHERE order_header_no = #{orderHeaderNo}
    </select>

    <select id="getOrderItemCount" resultType="int">
        SELECT COUNT(*)
        FROM order_item
        WHERE order_header_no = #{orderHeaderNo}
    </select>

    <resultMap id="OrderResultMap" type="OrderVO">
        <result property="orderHeaderNo" column="ORDER_HEADER_NO"/>
        <result property="orderSdate" column="ORDER_SDATE"/>
        <result property="clientNo" column="CLIENT_NO"/>
        <result property="productName" column="PRODUCT_NAME"/>
        <result property="totalAmount" column="TOTAL_AMOUNT"/>
        <result property="employeeNo" column="EMPLOYEE_NO"/>
        <result property="orderStatus" column="ORDER_STATUS"/>
        <result property="deliveryStatus" column="DELIVERY_STATUS"/>
        <result property="delivery" column="DELIVERY"/>
    </resultMap>

    <!-- 판매내역 조회 기능 (메인화면창) -->
    <select id="getList" resultMap="OrderResultMap">
        SELECT
            H.ORDER_HEADER_NO,
            H.ORDER_SDATE,
            H.CLIENT_NO,
            CL.CLIENT_NAME,
                CASE
                WHEN COUNT(P.PRODUCT_NAME) > 1 THEN
                CONCAT(
                MIN(P.PRODUCT_NAME),
                ' 외 ',
                COUNT(P.PRODUCT_NAME) - 1,
                '건'
                )
                ELSE
                MIN(P.PRODUCT_NAME)
                END AS PRODUCT_NAMES,
            SUM(I.AMOUNT) AS TOTAL_AMOUNT,
            H.EMPLOYEE_NO,
            E.EMPLOYEE_NAME,
            H.ORDER_STATUS,
            H.DELIVERY_STATUS,
            H.DELIVERY
        FROM ORDER_ITEM I
        LEFT JOIN ORDER_HEADER H ON I.ORDER_HEADER_NO = H.ORDER_HEADER_NO
        LEFT JOIN CLIENT CL ON H.CLIENT_NO = CL.CLIENT_NO
        LEFT JOIN EMPLOYEE E ON H.EMPLOYEE_NO = E.EMPLOYEE_NO
        LEFT JOIN PRODUCT P ON I.PRODUCT_NO = P.PRODUCT_NO
        WHERE 1 = 1
        <if test="orderSdate != null and orderSdate != ''">
            and H.order_sdate = CAST(#{orderSdate} AS date)
        </if>
        <if test="clientName != null and clientName != ''">
            and CL.client_name like concat('%', #{clientName}, '%')
        </if>
        <if test="productName != null and productName != ''">
            and P.product_name like concat('%', #{productName}, '%')
        </if>
        <if test="employeeName != null and employeeName != ''">
            and E.employee_name like concat('%', #{employeeName}, '%')
        </if>
        <if test="orderStatus != null and orderStatus != ''">
            and H.order_status like concat('%', #{orderStatus}, '%')
        </if>
        <if test="deliveryStatus != null and deliveryStatus != ''">
            and H.delivery_status like concat('%', #{deliveryStatus}, '%')
        </if>
        <if test="deliveryDate != null and deliveryDate != ''">
            and H.delivery = CAST(#{deliveryDate} AS date)
        </if>
        GROUP BY
        H.ORDER_HEADER_NO,
        H.ORDER_SDATE,
        H.CLIENT_NO,
        CL.CLIENT_NAME,
        H.EMPLOYEE_NO,
        E.EMPLOYEE_NAME,
        H.ORDER_STATUS,
        H.DELIVERY_STATUS,
        H.DELIVERY
        ORDER BY H.ORDER_HEADER_NO DESC
        limit #{amount} offset #{pageStart}
    </select>


    <select id="getItems" resultType="orderItemVO">
        SELECT *
        FROM order_item
        WHERE order_header_no = #{orderHeaderNo}
    </select>

    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*)
        FROM (
        SELECT
        H.ORDER_HEADER_NO
        FROM ORDER_ITEM I
        LEFT JOIN ORDER_HEADER H ON I.ORDER_HEADER_NO = H.ORDER_HEADER_NO
        LEFT JOIN CLIENT CL ON H.CLIENT_NO = CL.CLIENT_NO
        LEFT JOIN EMPLOYEE E ON H.EMPLOYEE_NO = E.EMPLOYEE_NO
        LEFT JOIN PRODUCT P ON I.PRODUCT_NO = P.PRODUCT_NO
        WHERE 1 = 1
        <if test="orderSdate != null and orderSdate != ''">
            and H.order_sdate = CAST(#{orderSdate} AS date)
        </if>
        <if test="clientName != null and clientName != ''">
            and CL.client_name like concat('%', #{clientName}, '%')
        </if>
        <if test="productName != null and productName != ''">
            and P.product_name like concat('%', #{productName}, '%')
        </if>
        <if test="employeeName != null and employeeName != ''">
            and E.employee_name like concat('%', #{employeeName}, '%')
        </if>
        <if test="orderStatus != null and orderStatus != ''">
            and H.order_status like concat('%', #{orderStatus}, '%')
        </if>
        <if test="deliveryStatus != null and deliveryStatus != ''">
            and H.delivery_status like concat('%', #{deliveryStatus}, '%')
        </if>
        <if test="deliveryDate != null and deliveryDate != ''">
            and H.delivery = CAST(#{deliveryDate} AS date)
        </if>
        GROUP BY
        H.ORDER_HEADER_NO
        ) AS subquery
    </select>

    <!-- 사원리스트 조회하기 -->
    <select id="getEmployeeList" resultType="EmployeeVO">
        SELECT *
        FROM EMPLOYEE
        ORDER BY EMPLOYEE_NO ASC
    </select>

    <!-- 사원 정보 조회하기 -->
    <select id="getEmployeeContent" parameterType="int" resultType="EmployeeVO">
        select * from employee where employee_no = #{employeeNo}
    </select>

    <!-- 고객사리스트 조회하기 -->
    <select id="getClientList" resultType="ClientVO">
        SELECT *
        FROM CLIENT
        ORDER BY CLIENT_NO ASC
    </select>

    <!-- 고객사 정보 조회하기 -->
    <select id="getClientContent" parameterType="int" resultType="ClientVO">
        select * from client where client_no = #{clientNo}
    </select>

    <!-- 카테고리 조회하기 -->
<!--    <select id="getCategory" resultType="CategoryVO">-->
<!--        SELECT C.*-->
<!--        FROM CATEGORY C-->
<!--        INNER JOIN PRODUCT P-->
<!--        ON C.CATEGORY_NO = P.CATEGORY_NO-->
<!--        INNER JOIN CONTRACT_PRICE CP-->
<!--        ON P.PRODUCT_NO = CP.PRODUCT_NO-->
<!--        WHERE CP.CLIENT_NO = #{clientNo}-->
<!--        GROUP BY C.CATEGORY_NO, C.CATEGORY_NAME-->
<!--    </select>-->

    <!-- 거래체결한 상품 조회하기 -->
    <select id="getProductList" resultType="ContractVO">
        SELECT P.PRODUCT_NO, P.PRODUCT_NAME, CP.CONTRACT_PRICE
        FROM CLIENT C
        INNER JOIN CONTRACT_PRICE CP
        ON C.CLIENT_NO = CP.CLIENT_NO
        INNER JOIN PRODUCT P
        ON CP.PRODUCT_NO = P.PRODUCT_NO
        WHERE C.CLIENT_NO = #{clientNo}
            AND CP.CONTRACT_PRICE_STATUS = '승인'
        AND CURRENT_DATE BETWEEN CP.CONTRACT_SDATE AND CP.CONTRACT_EDATE
    </select>


    <!-- 거래체결한 상품가격 조회하기 -->
    <select id="getProductPrice" resultType="int">
        SELECT CP.CONTRACT_PRICE
        FROM CLIENT C
        INNER JOIN CONTRACT_PRICE CP
        ON C.CLIENT_NO = CP.CLIENT_NO
        INNER JOIN PRODUCT P
        ON CP.PRODUCT_NO = P.PRODUCT_NO
        WHERE C.CLIENT_NO = #{clientNo}
        AND P.PRODUCT_NO = #{productNo}
        AND CURRENT_DATE BETWEEN CP.CONTRACT_SDATE AND CP.CONTRACT_EDATE
    </select>

    <!-- 판매내역 수정하기 -->
    <update id="updateStatus" parameterType="orderVO">
        UPDATE ORDER_HEADER
        SET
        ORDER_STATUS = #{orderStatus},
        DELIVERY_STATUS = #{deliveryStatus},
        DELIVERY = #{delivery}
        WHERE ORDER_HEADER_NO = #{orderHeaderNo}
    </update>
    <update id="updateItem" parameterType="orderItemVO">
        UPDATE ORDER_ITEM
        SET
        PRODUCT_QUANTITY = #{productQuantity},
        AMOUNT = #{amount}
        WHERE ORDER_HEADER_NO = #{orderHeaderNo}
        AND PRODUCT_NO = #{productNo}
    </update>

    <!-- 승인상태 변경 -->
    <update id="changeProductStatus">
        WITH stock_data AS (
        SELECT
        p.product_no,
        COALESCE(SUM(pur.purchase_quantity), 0) - COALESCE(SUM(ord.product_quantity), 0) AS stock_quantity
        FROM
        product p
        LEFT JOIN
        purchase pur ON p.product_no = pur.product_no
        LEFT JOIN
        order_item ord ON p.product_no = ord.product_no
        GROUP BY
        p.product_no
        )
        UPDATE product
        SET product_remark = CASE
        <![CDATA[ WHEN stock_data.stock_quantity < product.safety_quantity THEN '품절' ]]>
        ELSE '판매중'
        END
        FROM stock_data
        WHERE product.product_no = stock_data.product_no
        <![CDATA[ AND product.product_remark <> '단종' ]]>  -- 기존 값이 '단종'이 아닌 경우에만 업데이트
    </update>

    <!-- 재고확인 -->
    <select id="getInventoryQuantity" resultType="int">
        SELECT
            COALESCE(SUM(purchase.purchase_quantity), 0)
            - COALESCE(SUM(order_item.product_quantity), 0)
            - COALESCE(MAX(product.safety_quantity), 0) AS stock
        FROM product
        LEFT JOIN purchase ON product.product_no = purchase.product_no
        LEFT JOIN order_item ON product.product_no = order_item.product_no
        where product.product_no = #{productNo}
        GROUP BY product.product_no
    </select>
</mapper>