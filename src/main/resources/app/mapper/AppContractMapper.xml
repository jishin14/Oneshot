<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.oneshot.app.contract.AppContractMapper">
    <select id="getClientList" resultType="ClientVO">
        SELECT * FROM CLIENT ORDER BY CLIENT_NAME
    </select>

    <select id="getProductList" resultType="ProductVO">
        SELECT *
        FROM PRODUCT
        ORDER BY PRODUCT_NAME COLLATE "ko_KR.utf8"
    </select>

    <select id="getContractPriceByClientNoAndProductNo" resultType="ContractVO">
        SELECT * FROM CONTRACT_PRICE WHERE CLIENT_NO = #{clientNo} AND PRODUCT_NO = #{productNo} ORDER BY CONTRACT_SDATE DESC, CONTRACT_EDATE DESC
    </select>

    <select id="countOverlappingContracts" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM contract_price
        WHERE product_no = #{productNo}
        AND client_no = #{clientNo}
        AND (
        <![CDATA[ (contract_sdate <= #{contractEdate} AND contract_edate >= #{contractSdate}) ]]>
        )
    </select>

    <select id="getOverlappingContracts" parameterType="map" resultType="ContractVO">
        SELECT * FROM contract_price
        WHERE product_no = #{productNo}
        <![CDATA[ AND (contract_sdate <= #{contractEdate} AND contract_edate >= #{contractSdate}) ]]>
    </select>

    <delete id="deleteContract" parameterType="ContractVO">
        DELETE FROM contract_price
        WHERE product_no = #{productNo}
        AND client_no = #{clientNo}
        AND contract_sdate BETWEEN #{contractSdate} AND #{contractEdate}
        AND contract_edate BETWEEN #{contractSdate} AND #{contractEdate}
    </delete>

    <update id="updateContract" parameterType="ContractVO">
        UPDATE CONTRACT_PRICE
        SET
        contract_sdate = #{contractSdate},
        contract_edate = #{contractEdate},
        contract_price = #{contractPrice},
        contract_price_status = '승인대기'
        WHERE contract_price_no = #{contractPriceNo}
        AND product_no = #{productNo}
    </update>

    <insert id="registerContract" parameterType="ContractVO">
        INSERT INTO CONTRACT_PRICE (
        CONTRACT_PRICE_NO,
        PRODUCT_NO,
        EMPLOYEE_NO,
        CLIENT_NO,
        CONTRACT_SDATE,
        CONTRACT_EDATE,
        CONTRACT_PRICE,
        CONTRACT_PRICE_STATUS,
        CONTRACT_REGDATE,
        CONTRACT_FILE
        )
        VALUES
        (nextval('contract_price_seq'),
        #{productNo},
        1,
        #{clientNo},
        #{contractSdate},
        #{contractEdate},
        #{contractPrice},
        'y',
        now(),
        #{contractFile})
    </insert>

    <select id="getContractPriceList" parameterType="String" resultType="ContractVO">
        SELECT CONTRACT_PRICE.*, CLIENT.CLIENT_NAME, PRODUCT.PRODUCT_NAME
        FROM CONTRACT_PRICE
        LEFT JOIN CLIENT ON CONTRACT_PRICE.CLIENT_NO = CLIENT.CLIENT_NO
        LEFT JOIN PRODUCT ON CONTRACT_PRICE.PRODUCT_NO = PRODUCT.PRODUCT_NO
        WHERE CLIENT.CLIENT_NAME LIKE CONCAT('%', #{search}, '%')
        OR PRODUCT.PRODUCT_NAME LIKE CONCAT('%', #{search}, '%')
        ORDER BY CONTRACT_PRICE_NO DESC
    </select>


    <select id="getContractFile" resultType="String">
        SELECT ENCODE(CONTRACT_FILE, 'BASE64') AS CONTRACT_FILE FROM CONTRACT_PRICE WHERE CONTRACT_PRICE_NO = #{contractPriceNo};
    </select>
</mapper>